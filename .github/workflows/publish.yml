name: Build and publish binaries to NPM

on:
  workflow_dispatch:

env:
  LLVM_RELEASE_VERSION_WINDOWS: 18
  LLVM_RELEASE_VERSION_MAC: 17
  LLVM_RELEASE_VERSION_LINUX: 17
  LLVM_RELEASE_VERSION_UBUNTU20: 17
  LLVM_DEV_VERSION: 20

jobs:

  publish-win32-x64:
    runs-on: windows-latest

    defaults:
      run:
        shell: cmd
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: CMake
        run: |
          cd c3c
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Publish to NPM
        run: |
          xcopy /Y /I .\c3c\build\Release\c3c.exe   .\npm\@c3-lang\c3c-win32-x64
          xcopy /Y /I .\c3c\build\Release\c3c_rt    .\npm\@c3-lang\c3c-win32-x64\c3c_rt
          xcopy /Y /I .\c3c\lib                     .\npm\@c3-lang\c3c-win32-x64\lib
          xcopy /Y /I .\c3c\msvc_build_libraries.py .\npm\@c3-lang\c3c-win32-x64
          cd .\npm\@c3-lang\c3c-win32-x64
          echo Files to be published:
          dir
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


  build-linux:
    runs-on: ubuntu-latest
    strategy:
      # Don't abort runners if a single one fails
      fail-fast: false
      matrix:
        build_type: [Release]
        llvm_version: [17, 18]

    steps:
      - uses: actions/checkout@v4
      - name: Install common deps
        run: |
          sudo apt-get install zlib1g zlib1g-dev python3 ninja-build curl

      - name: Install Clang ${{matrix.llvm_version}}
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          if [[ "${{matrix.llvm_version}}" < 18 ]]; then
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${{matrix.llvm_version}} main"
            sudo apt-get update
            sudo apt-get install -y -t llvm-toolchain-focal-${{matrix.llvm_version}} libpolly-${{matrix.llvm_version}}-dev \
              clang-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}}-dev \
              lld-${{matrix.llvm_version}} liblld-${{matrix.llvm_version}}-dev libmlir-${{matrix.llvm_version}} \
              libmlir-${{matrix.llvm_version}}-dev mlir-${{matrix.llvm_version}}-tools
          else
            if [[ "${{matrix.llvm_version}}" < "${{env.LLVM_DEV_VERSION}}" ]]; then
              sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${{matrix.llvm_version}} main"
              sudo apt-get update
              sudo apt-get install -y -t llvm-toolchain-focal-${{matrix.llvm_version}} libpolly-${{matrix.llvm_version}}-dev \
                clang-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}}-dev \
                lld-${{matrix.llvm_version}} liblld-${{matrix.llvm_version}}-dev
            else
              sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
              sudo apt-get install -y -t llvm-toolchain-focal libpolly-${{matrix.llvm_version}}-dev \
                clang-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}}-dev \
                lld-${{matrix.llvm_version}} liblld-${{matrix.llvm_version}}-dev
            fi
          fi
      - name: CMake
        if: matrix.llvm_version < 18 || matrix.llvm_version == env.LLVM_DEV_VERSION
        run: |
          cmake -B build \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DCMAKE_C_COMPILER=clang-${{matrix.llvm_version}} \
                -DCMAKE_CXX_COMPILER=clang++-${{matrix.llvm_version}} \
                -DCMAKE_LINKER=lld-link-${{matrix.llvm_version}} \
                -DCMAKE_OBJCOPY=llvm-objcopy-${{matrix.llvm_version}} \
                -DCMAKE_STRIP=llvm-strip-${{matrix.llvm_version}} \
                -DCMAKE_DLLTOOL=llvm-dlltool-${{matrix.llvm_version}} \
                -DC3_LLVM_VERSION=${{matrix.llvm_version}}
          cmake --build build
      - name: CMake18
        if: matrix.llvm_version >= 18 && matrix.llvm_version != env.LLVM_DEV_VERSION
        run: |
          cmake -B build \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DCMAKE_C_COMPILER=clang-${{matrix.llvm_version}} \
                -DCMAKE_CXX_COMPILER=clang++-${{matrix.llvm_version}} \
                -DCMAKE_LINKER=lld-link-${{matrix.llvm_version}} \
                -DCMAKE_OBJCOPY=llvm-objcopy-${{matrix.llvm_version}} \
                -DCMAKE_STRIP=llvm-strip-${{matrix.llvm_version}} \
                -DCMAKE_DLLTOOL=llvm-dlltool-${{matrix.llvm_version}} \
                -DC3_LLVM_VERSION=${{matrix.llvm_version}}.1
          cmake --build build

      - name: bundle_output
        if: matrix.llvm_version == env.LLVM_RELEASE_VERSION_LINUX
        run: |
          mkdir c3
          cp -r lib c3
          cp msvc_build_libraries.py c3
          cp build/c3c c3
          tar czf c3-linux-${{matrix.build_type}}.tar.gz c3

      - name: upload artifacts
        if: matrix.llvm_version == env.LLVM_RELEASE_VERSION_LINUX
        uses: actions/upload-artifact@v4
        with:
          name: c3-linux-${{matrix.build_type}}
          path: c3-linux-${{matrix.build_type}}.tar.gz


  build-linux-ubuntu20:
    runs-on: ubuntu-20.04
    strategy:
      # Don't abort runners if a single one fails
      fail-fast: false
      matrix:
        build_type: [Release]
        llvm_version: [17, 18]
    steps:
      - uses: actions/checkout@v4
      - name: Install common deps
        run: |
          sudo apt-get install zlib1g zlib1g-dev python3 ninja-build curl

      - name: Install Clang ${{matrix.llvm_version}}
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          if [[ "${{matrix.llvm_version}}" < "${{env.LLVM_DEV_VERSION}}" ]]; then
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${{matrix.llvm_version}} main"
          else
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
          fi
          sudo apt-get update
          sudo apt-get install -y clang-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}} llvm-${{matrix.llvm_version}}-dev lld-${{matrix.llvm_version}} liblld-${{matrix.llvm_version}}-dev
          sudo apt-get install -y libmlir-${{matrix.llvm_version}} libmlir-${{matrix.llvm_version}}-dev mlir-${{matrix.llvm_version}}-tools
          sudo apt-get install -y libpolly-${{matrix.llvm_version}}-dev
      - name: CMake Old
        if: matrix.llvm_version < 18 || matrix.llvm_version == env.LLVM_DEV_VERSION
        run: |
          cmake -B build \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DCMAKE_C_COMPILER=clang-${{matrix.llvm_version}} \
                -DCMAKE_CXX_COMPILER=clang++-${{matrix.llvm_version}} \
                -DCMAKE_LINKER=lld-link-${{matrix.llvm_version}} \
                -DCMAKE_OBJCOPY=llvm-objcopy-${{matrix.llvm_version}} \
                -DCMAKE_STRIP=llvm-strip-${{matrix.llvm_version}} \
                -DCMAKE_DLLTOOL=llvm-dlltool-${{matrix.llvm_version}} \
                -DC3_LLVM_VERSION=${{matrix.llvm_version}}
          cmake --build build
      - name: CMake
        if: matrix.llvm_version >= 18 && matrix.llvm_version != env.LLVM_DEV_VERSION
        run: |
          cmake -B build \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DCMAKE_C_COMPILER=clang-${{matrix.llvm_version}} \
                -DCMAKE_CXX_COMPILER=clang++-${{matrix.llvm_version}} \
                -DCMAKE_LINKER=lld-link-${{matrix.llvm_version}} \
                -DCMAKE_OBJCOPY=llvm-objcopy-${{matrix.llvm_version}} \
                -DCMAKE_STRIP=llvm-strip-${{matrix.llvm_version}} \
                -DCMAKE_DLLTOOL=llvm-dlltool-${{matrix.llvm_version}} \
                -DC3_LLVM_VERSION=${{matrix.llvm_version}}.1
          cmake --build build

      - name: bundle_output
        if: matrix.llvm_version == env.LLVM_RELEASE_VERSION_UBUNTU20
        run: |
          mkdir c3
          cp -r lib c3
          cp msvc_build_libraries.py c3
          cp build/c3c c3
          tar czf c3-ubuntu-20-${{matrix.build_type}}.tar.gz c3

      - name: upload artifacts
        if: matrix.llvm_version == env.LLVM_RELEASE_VERSION_UBUNTU20
        uses: actions/upload-artifact@v4
        with:
          name: c3-ubuntu-20-${{matrix.build_type}}
          path: c3-ubuntu-20-${{matrix.build_type}}.tar.gz
  
  build-mac:
    runs-on: macos-latest
    strategy:
      # Don't abort runners if a single one fails
      fail-fast: false
      matrix:
        build_type: [ Release ]
        llvm_version: [17, 18]
    steps:
      - uses: actions/checkout@v4
      - name: Download LLVM
        run: |
          brew install llvm@${{ matrix.llvm_version }} ninja curl
          echo "/opt/homebrew/opt/llvm@${{ matrix.llvm_version }}/bin" >> $GITHUB_PATH
          TMP_PATH=$(xcrun --show-sdk-path)/user/include
          echo "CPATH=$TMP_PATH" >> $GITHUB_ENV

      - name: CMake
        if: matrix.llvm_version < 18
        run: |
          cmake -B build -G Ninja -DC3_LLVM_VERSION=${{matrix.llvm_version}} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build build
      - name: CMake18
        if: matrix.llvm_version >= 18
        run: |
          cmake -B build -G Ninja -DC3_LLVM_VERSION=${{matrix.llvm_version}}.1 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build build

      - name: bundle_output
        if: matrix.llvm_version == env.LLVM_RELEASE_VERSION_MAC
        run: |
          mkdir macos
          cp -r lib macos
          cp msvc_build_libraries.py macos
          cp build/c3c macos
          zip -r c3-macos-${{matrix.build_type}}.zip macos

      - name: upload artifacts
        if: matrix.llvm_version == env.LLVM_RELEASE_VERSION_MAC
        uses: actions/upload-artifact@v4
        with:
          name: c3-macos-${{matrix.build_type}}
          path: c3-macos-${{matrix.build_type}}.zip


  publish:
    runs-on: ubuntu-latest
    needs: [build-msvc, build-linux, build-mac]

    steps:
      - uses: actions/checkout@v4
      # - name: delete tag
      #   continue-on-error: true
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.git.deleteRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: 'tags/latest',
      #         sha: context.sha
      #       })
      # - name: create tag
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: 'refs/tags/latest',
      #         sha: context.sha
      #       })

      - uses: actions/download-artifact@v4
      - run: cp -r lib c3-windows-Release
      - run: cp -r lib c3-windows-Debug
      - run: cp msvc_build_libraries.py c3-windows-Release
      - run: cp msvc_build_libraries.py c3-windows-Debug
      - run: zip -r c3-windows.zip c3-windows-Release
      - run: zip -r c3-windows-debug.zip c3-windows-Debug
      - run: mv c3-linux-Release/c3-linux-Release.tar.gz c3-linux-Release/c3-linux.tar.gz
      - run: mv c3-linux-Debug/c3-linux-Debug.tar.gz c3-linux-Debug/c3-linux-debug.tar.gz
      - run: mv c3-ubuntu-20-Release/c3-ubuntu-20-Release.tar.gz c3-ubuntu-20-Release/c3-ubuntu-20.tar.gz
      - run: mv c3-ubuntu-20-Debug/c3-ubuntu-20-Debug.tar.gz c3-ubuntu-20-Debug/c3-ubuntu-20-debug.tar.gz
      - run: mv c3-macos-Release/c3-macos-Release.zip c3-macos-Release/c3-macos.zip
      - run: mv c3-macos-Debug/c3-macos-Debug.zip c3-macos-Debug/c3-macos-debug.zip

      # - id: create_release
      #   uses: softprops/action-gh-release@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: latest
      #     release_name: latest
      #     draft: false
      #     prerelease: true
      #     files: |
      #       c3-windows.zip
      #       c3-windows-debug.zip
      #       c3-linux-Release/c3-linux.tar.gz
      #       c3-linux-Debug/c3-linux-debug.tar.gz
      #       c3-ubuntu-20-Release/c3-ubuntu-20.tar.gz
      #       c3-ubuntu-20-Debug/c3-ubuntu-20-debug.tar.gz
      #       c3-macos-Release/c3-macos.zip
      #       c3-macos-Debug/c3-macos-debug.zip
